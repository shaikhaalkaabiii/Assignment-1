# Class: Item: represents an item in the delivery order.
class Item:
    def __init__(self, item_code, description, quantity, unit_price):
        """
        Constructor for the Item class.
        Initializes the attributes of an item.
        """
        self._item_code = item_code  # Unique identifier for the item
        self._description = description  # Description of the item
        self._quantity = quantity  # Quantity of the item
        self._unit_price = unit_price  # Price per unit of the item

    # Getters
    def get_item_code(self):
        """Returns the item code."""
        return self._item_code

    def get_description(self):
        """Returns the item description."""
        return self._description

    def get_quantity(self):
        """Returns the item quantity."""
        return self._quantity

    def get_unit_price(self):
        """Returns the unit price of the item."""
        return self._unit_price

    # Setters
    def set_item_code(self, value):
        """Sets the item code."""
        self._item_code = value

    def set_description(self, value):
        """Sets the item description."""
        self._description = value

    def set_quantity(self, value):
        """Sets the item quantity."""
        self._quantity = value

    def set_unit_price(self, value):
        """Sets the unit price of the item."""
        self._unit_price = value

    # Other methods
    def get_total_price(self):
        """
        Calculates the total price of the item (quantity * unit price).
        Returns the total price for the item.
        """
        return self._quantity * self._unit_price


# Class: DeliveryOrder: rRepresents a delivery order created by the customer.
class DeliveryOrder:
    def __init__(self, order_number, recipient_name, contact, delivery_address, items, total_weight, delivery_date):
        """
        Constructor for the DeliveryOrder class.
        Initializes the attributes of a delivery order.
        """
        self._order_number = order_number  # Unique identifier for the order
        self._recipient_name = recipient_name  # Name of the recipient
        self._contact = contact  # Contact information of the recipient
        self._delivery_address = delivery_address  # Delivery address
        self._items = items  # List of Item objects in the order
        self._total_weight = total_weight  # Total weight of the order
        self._delivery_date = delivery_date  # Scheduled delivery date

    # Getters
    def get_order_number(self):
        """Returns the order number."""
        return self._order_number

    def get_recipient_name(self):
        """Returns the recipient's name."""
        return self._recipient_name

    def get_contact(self):
        """Returns the recipient's contact information."""
        return self._contact

    def get_delivery_address(self):
        """Returns the delivery address."""
        return self._delivery_address

    def get_items(self):
        """Returns the list of items in the order."""
        return self._items

    def get_total_weight(self):
        """Returns the total weight of the order."""
        return self._total_weight

    def get_delivery_date(self):
        """Returns the delivery date."""
        return self._delivery_date

    # Setters
    def set_order_number(self, value):
        """Sets the order number."""
        self._order_number = value

    def set_recipient_name(self, value):
        """Sets the recipient's name."""
        self._recipient_name = value

    def set_contact(self, value):
        """Sets the recipient's contact information."""
        self._contact = value

    def set_delivery_address(self, value):
        """Sets the delivery address."""
        self._delivery_address = value

    def set_items(self, value):
        """Sets the list of items in the order."""
        self._items = value

    def set_total_weight(self, value):
        """Sets the total weight of the order."""
        self._total_weight = value

    def set_delivery_date(self, value):
        """Sets the delivery date."""
        self._delivery_date = value

    # Other methods
    def calculate_total_weight(self):
        """
        Calculates the total weight of the order.
        In this case, the total weight is explicitly set to 7 kg.
        """
        self._total_weight = 7.0  # Set total weight to 7 kg
        return self._total_weight


# Class: DeliveryNote: represents the delivery note generated for a finalized order.
class DeliveryNote:
    def __init__(self, delivery_note_number, order_number, recipient_details, delivery_address, items_summary, total_charges):
        """
        Constructor for the DeliveryNote class.
        Initializes the attributes of a delivery note.
        """
        self._delivery_note_number = delivery_note_number  # Unique identifier for the delivery note
        self._order_number = order_number  # Order number associated with the delivery note
        self._recipient_details = recipient_details  # Recipient's details
        self._delivery_address = delivery_address  # Delivery address
        self._items_summary = items_summary  # List of Item objects in the delivery note
        self._total_charges = total_charges  # Total charges for the delivery

    # Getters
    def get_delivery_note_number(self):
        """Returns the delivery note number."""
        return self._delivery_note_number

    def get_order_number(self):
        """Returns the associated order number."""
        return self._order_number

    def get_recipient_details(self):
        """Returns the recipient's details."""
        return self._recipient_details

    def get_delivery_address(self):
        """Returns the delivery address."""
        return self._delivery_address

    def get_items_summary(self):
        """Returns the list of items in the delivery note."""
        return self._items_summary

    def get_total_charges(self):
        """Returns the total charges for the delivery."""
        return self._total_charges

    # Setters
    def set_delivery_note_number(self, value):
        """Sets the delivery note number."""
        self._delivery_note_number = value

    def set_order_number(self, value):
        """Sets the associated order number."""
        self._order_number = value

    def set_recipient_details(self, value):
        """Sets the recipient's details."""
        self._recipient_details = value

    def set_delivery_address(self, value):
        """Sets the delivery address."""
        self._delivery_address = value

    def set_items_summary(self, value):
        """Sets the list of items in the delivery note."""
        self._items_summary = value

    def set_total_charges(self, value):
        """Sets the total charges for the delivery."""
        self._total_charges = value

    # Other methods
    def generate_delivery_note(self):
        """
        Generates the delivery note with all details.
        Prints the delivery note information.
        """
        print("Delivery Note Generated:")
        print(f"Delivery Note Number: {self._delivery_note_number}")
        print(f"Order Number: {self._order_number}")
        print(f"Recipient: {self._recipient_details}")
        print(f"Delivery Address: {self._delivery_address}")
        print("Items Summary:")
        for item in self._items_summary:
            print(f"- {item.get_description()}: {item.get_quantity()} x AED {item.get_unit_price()}")
        print(f"Total Charges: AED {self._total_charges}")

    def print_delivery_note(self):
        """
        Prints the delivery note.
        Calls the generate_delivery_note method to display the details.
        """
        self.generate_delivery_note()


# Class: DeliveryManager: represents the delivery manager who manages and updates delivery details.
class DeliveryManager:
    def __init__(self, manager_id, name):
        """
        Constructor for the DeliveryManager class.
        Initializes the attributes of a delivery manager.
        """
        self._manager_id = manager_id  # Unique identifier for the manager
        self._name = name  # Name of the manager

    # Getters
    def get_manager_id(self):
        """Returns the manager's ID."""
        return self._manager_id

    def get_name(self):
        """Returns the manager's name."""
        return self._name

    # Setters
    def set_manager_id(self, value):
        """Sets the manager's ID."""
        self._manager_id = value

    def set_name(self, value):
        """Sets the manager's name."""
        self._name = value

    # Other methods
    def update_delivery_details(self, order, new_address):
        """
        Updates delivery details (e.g., address).
        Updates the delivery address of the specified order.
        """
        order.set_delivery_address(new_address)
        print("Delivery address updated successfully.")

    def verify_delivery_note(self, delivery_note):
        """
        Verifies the accuracy of the delivery note before printing.
        Calls the generate_delivery_note method to display the details.
        """
        print("Delivery Note Verified:")
        delivery_note.generate_delivery_note()
